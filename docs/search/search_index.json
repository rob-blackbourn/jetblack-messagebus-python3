{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 A Python client for jetblack-messagebus .","title":"Overview"},{"location":"#overview","text":"A Python client for jetblack-messagebus .","title":"Overview"},{"location":"api/","text":"module jetblack_messagebus \u00b6 Summary \u00b6 jetblack messagebus client class BasicAuthenticator ( ConnectionStringAuthenticator ) \u00b6 Summary \u00b6 Initialise the authenticator. jetblack_messagebus.authentication . BasicAuthenticator ( username : str , password : str , impersonating : Optional[str] , forwarded_for : Optional[str] , application : Optional[str] ) -> None Parameters \u00b6 username : str The username. password : str The password. impersonating : Optional[str] (optional) For a proxy, the user that is being impersonated. Defaults to None. forwarded_for : Optional[str] (optional) For a proxy, the host on which the actual client is situated. Defaults to None. application : Optional[str] (optional) The name of the application. Defaults to None. async method BasicAuthenticator . authenticate \u00b6 Summary \u00b6 Authenticate the client async BasicAuthenticator . authenticate ( reader : DataReader , writer : DataWriter ) -> None Parameters \u00b6 reader : DataReader writer : DataWriter method BasicAuthenticator . to_connection_string \u00b6 Summary \u00b6 Get the connection string. BasicAuthenticator . to_connection_string ( ) -> str Returns \u00b6 str : The connection string. class CallbackClient ( Client ) \u00b6 Summary \u00b6 Feedbus callback client jetblack_messagebus . CallbackClient ( reader : DataReader , writer : DataWriter , authenticator : Optional[Authenticator] , monitor_heartbeat : bool ) -> None Parameters \u00b6 reader : DataReader writer : DataWriter authenticator : Optional[Authenticator] monitor_heartbeat : bool property CallbackClient . authorization_handlers \u00b6 Summary \u00b6 The handlers called when an authorization request is Description \u00b6 received. authorization_handlers -> List[AuthorizationHandler] property CallbackClient . closed_handlers \u00b6 Summary \u00b6 The list of handlers called when a connection is closed closed_handlers -> List[ClosedHandler] property CallbackClient . data_handlers \u00b6 Summary \u00b6 The list of handlers called when data is received. data_handlers -> List[DataHandler] property CallbackClient . notification_handlers \u00b6 Summary \u00b6 The list of handlers called when a notification is received notification_handlers -> List[NotificationHandler] async class method CallbackClient . create \u00b6 Summary \u00b6 Create the client async CallbackClient . create ( port : int , * , authenticator : Optional[Authenticator] , ssl : Optional[SSLContext] , monitor_heartbeat : bool ) -> Client Parameters \u00b6 port : int The distributor port authenticator : Optional[Authenticator] (optional) An authenticator. Defaults to None. ssl : Optional[SSLContext] (optional) The context for an ssl connection. Defaults to None. monitor_heartbeat : bool (optional) If true use the monitor heartbeat. Defaults to False. Returns \u00b6 Client : The connected client. async method CallbackClient . add_notification \u00b6 Summary \u00b6 Add a notification async CallbackClient . add_notification ( feed : str ) -> None Parameters \u00b6 feed : str The feed name. async method CallbackClient . add_subscription \u00b6 Summary \u00b6 Add a subscription async CallbackClient . add_subscription ( feed : str , topic : str ) -> None Parameters \u00b6 feed : str The feed name. topic : str The topic name. async method CallbackClient . authorize \u00b6 Summary \u00b6 Send an authorization response. async CallbackClient . authorize ( client_id : UUID , feed : str , topic : str , is_authorization_required : bool , entitlements : Optional[Set[int]] ) -> None Parameters \u00b6 client_id : UUID An identifier for the client. feed : str The feed name. topic : str The topic name. is_authorization_required : bool If True, authorization is required. entitlements : Optional[Set[int]] The entitlements of the user. async method CallbackClient . on_authorization \u00b6 Summary \u00b6 Called when authorization is requested async CallbackClient . on_authorization ( client_id : UUID , host : str , user : str , feed : str , topic : str ) -> None Parameters \u00b6 client_id : UUID host : str user : str feed : str topic : str async method CallbackClient . on_closed \u00b6 Summary \u00b6 Called when the connection has been closed async CallbackClient . on_closed ( is_faulted : bool ) -> None Parameters \u00b6 is_faulted : bool If true the connection was closed by the server async method CallbackClient . on_data \u00b6 Summary \u00b6 Called when data is received async CallbackClient . on_data ( user : str , host : str , feed : str , topic : str , data_packets : Optional[List[DataPacket]] , is_image : bool ) -> None Parameters \u00b6 user : str The user name of the sender. host : str The host from which the data was sent. feed : str The feed name. topic : str The topic name. data_packets : Optional[List[DataPacket]] The data packets. is_image : bool True if the data is considered an image. async method CallbackClient . on_forwarded_subscription_request \u00b6 Summary \u00b6 Called for a notification. async CallbackClient . on_forwarded_subscription_request ( client_id : UUID , user : str , host : str , feed : str , topic : str , is_add : bool ) -> None Parameters \u00b6 client_id : UUID An identifier for the client. user : str The name of the user that requested the subscription. host : str The host from which the subscription was requested. feed : str The feed name. topic : str The topic name. is_add : bool If true the request was to add a subscription. async method CallbackClient . publish \u00b6 Summary \u00b6 Publish data to subscribers async CallbackClient . publish ( feed : str , topic : str , is_image : bool , data_packets : Optional[List[DataPacket]] ) -> None Parameters \u00b6 feed : str The feed name. topic : str The topic name. is_image : bool If true the data is considered an image. data_packets : Optional[List[DataPacket]] Th data packets. async method CallbackClient . remove_notification \u00b6 Summary \u00b6 Remove a notification async CallbackClient . remove_notification ( feed : str ) -> None Parameters \u00b6 feed : str The feed name. async method CallbackClient . remove_subscription \u00b6 Summary \u00b6 Remove a subscription async CallbackClient . remove_subscription ( feed : str , topic : str ) -> None Parameters \u00b6 feed : str The feed name. topic : str The topic name. async method CallbackClient . send \u00b6 Summary \u00b6 Send data to a client async CallbackClient . send ( client_id : UUID , feed : str , topic : str , is_image : bool , data_packets : Optional[List[DataPacket]] ) -> None Parameters \u00b6 client_id : UUID The clint id. feed : str The feed name. topic : str The topic name. is_image : bool If true the data is considered an image. data_packets : Optional[List[DataPacket]] Th data packets. async method CallbackClient . start \u00b6 Summary \u00b6 Start handling messages async CallbackClient . start ( ) -> None method CallbackClient . stop \u00b6 Summary \u00b6 Stop handling messages CallbackClient . stop ( ) -> None class Client \u00b6 Summary \u00b6 Feedbus client jetblack_messagebus . Client ( reader : DataReader , writer : DataWriter , authenticator : Optional[Authenticator] , monitor_heartbeat : bool ) -> None Parameters \u00b6 reader : DataReader writer : DataWriter authenticator : Optional[Authenticator] monitor_heartbeat : bool async class method Client . create \u00b6 Summary \u00b6 Create the client async Client . create ( port : int , * , authenticator : Optional[Authenticator] , ssl : Optional[SSLContext] , monitor_heartbeat : bool ) -> Client Parameters \u00b6 port : int The distributor port authenticator : Optional[Authenticator] (optional) An authenticator. Defaults to None. ssl : Optional[SSLContext] (optional) The context for an ssl connection. Defaults to None. monitor_heartbeat : bool (optional) If true use the monitor heartbeat. Defaults to False. Returns \u00b6 Client : The connected client. async method Client . add_notification \u00b6 Summary \u00b6 Add a notification async Client . add_notification ( feed : str ) -> None Parameters \u00b6 feed : str The feed name. async method Client . add_subscription \u00b6 Summary \u00b6 Add a subscription async Client . add_subscription ( feed : str , topic : str ) -> None Parameters \u00b6 feed : str The feed name. topic : str The topic name. async method Client . authorize \u00b6 Summary \u00b6 Send an authorization response. async Client . authorize ( client_id : UUID , feed : str , topic : str , is_authorization_required : bool , entitlements : Optional[Set[int]] ) -> None Parameters \u00b6 client_id : UUID An identifier for the client. feed : str The feed name. topic : str The topic name. is_authorization_required : bool If True, authorization is required. entitlements : Optional[Set[int]] The entitlements of the user. async method Client . on_authorization \u00b6 Summary \u00b6 Called when authorization is requested async Client . on_authorization ( client_id : UUID , host : str , user : str , feed : str , topic : str ) -> None Parameters \u00b6 client_id : UUID host : str user : str feed : str topic : str async method Client . on_closed \u00b6 Summary \u00b6 Called when the connection has been closed async Client . on_closed ( is_faulted : bool ) -> None Parameters \u00b6 is_faulted : bool If true the connection was closed by the server async method Client . on_data \u00b6 Summary \u00b6 Called when data is received async Client . on_data ( user : str , host : str , feed : str , topic : str , data_packets : Optional[List[DataPacket]] , is_image : bool ) -> None Parameters \u00b6 user : str The user name of the sender. host : str The host from which the data was sent. feed : str The feed name. topic : str The topic name. data_packets : Optional[List[DataPacket]] The data packets. is_image : bool True if the data is considered an image. async method Client . on_forwarded_subscription_request \u00b6 Summary \u00b6 Called for a notification. async Client . on_forwarded_subscription_request ( client_id : UUID , user : str , host : str , feed : str , topic : str , is_add : bool ) -> None Parameters \u00b6 client_id : UUID An identifier for the client. user : str The name of the user that requested the subscription. host : str The host from which the subscription was requested. feed : str The feed name. topic : str The topic name. is_add : bool If true the request was to add a subscription. async method Client . publish \u00b6 Summary \u00b6 Publish data to subscribers async Client . publish ( feed : str , topic : str , is_image : bool , data_packets : Optional[List[DataPacket]] ) -> None Parameters \u00b6 feed : str The feed name. topic : str The topic name. is_image : bool If true the data is considered an image. data_packets : Optional[List[DataPacket]] Th data packets. async method Client . remove_notification \u00b6 Summary \u00b6 Remove a notification async Client . remove_notification ( feed : str ) -> None Parameters \u00b6 feed : str The feed name. async method Client . remove_subscription \u00b6 Summary \u00b6 Remove a subscription async Client . remove_subscription ( feed : str , topic : str ) -> None Parameters \u00b6 feed : str The feed name. topic : str The topic name. async method Client . send \u00b6 Summary \u00b6 Send data to a client async Client . send ( client_id : UUID , feed : str , topic : str , is_image : bool , data_packets : Optional[List[DataPacket]] ) -> None Parameters \u00b6 client_id : UUID The clint id. feed : str The feed name. topic : str The topic name. is_image : bool If true the data is considered an image. data_packets : Optional[List[DataPacket]] Th data packets. async method Client . start \u00b6 Summary \u00b6 Start handling messages async Client . start ( ) -> None method Client . stop \u00b6 Summary \u00b6 Stop handling messages Client . stop ( ) -> None class DataPacket \u00b6 Summary \u00b6 Initialise a data packet. jetblack_messagebus.io . DataPacket ( entitlements : Optional[Set[int]] , data : Optional[bytes] ) -> None Parameters \u00b6 entitlements : Optional[Set[int]] An optional set of entitlements. data : Optional[bytes] The data. class NullAuthenticator ( Authenticator ) \u00b6 Summary \u00b6 Null Authenticator jetblack_messagebus.authentication . NullAuthenticator ( impersonating : Union[str, NoneType] , forwarded_for : Union[str, NoneType] , application : Union[str, NoneType] ) -> None Parameters \u00b6 impersonating : Union[str, NoneType] (optional) forwarded_for : Union[str, NoneType] (optional) application : Union[str, NoneType] (optional) async method NullAuthenticator . authenticate \u00b6 Summary \u00b6 Authenticate the client async NullAuthenticator . authenticate ( reader : DataReader , writer : DataWriter ) -> None Parameters \u00b6 reader : DataReader writer : DataWriter class TokenAuthenticator ( ConnectionStringAuthenticator ) \u00b6 Summary \u00b6 Token Authenticator jetblack_messagebus.authentication . TokenAuthenticator ( token : str , impersonating : Union[str, NoneType] , forwarded_for : Union[str, NoneType] , application : Union[str, NoneType] ) -> None Parameters \u00b6 token : str impersonating : Union[str, NoneType] (optional) forwarded_for : Union[str, NoneType] (optional) application : Union[str, NoneType] (optional) async method TokenAuthenticator . authenticate \u00b6 Summary \u00b6 Authenticate the client async TokenAuthenticator . authenticate ( reader : DataReader , writer : DataWriter ) -> None Parameters \u00b6 reader : DataReader writer : DataWriter method TokenAuthenticator . to_connection_string \u00b6 Summary \u00b6 Get the connection string. TokenAuthenticator . to_connection_string ( ) -> str Returns \u00b6 str : The connection string.","title":"jetblack_messagebus"},{"location":"api/#module-jetblack_messagebus","text":"","title":"module jetblack_messagebus"},{"location":"api/#summary","text":"jetblack messagebus client","title":"Summary"},{"location":"api/#class-basicauthenticatorconnectionstringauthenticator","text":"","title":"class BasicAuthenticator(ConnectionStringAuthenticator)"},{"location":"api/#summary_1","text":"Initialise the authenticator. jetblack_messagebus.authentication . BasicAuthenticator ( username : str , password : str , impersonating : Optional[str] , forwarded_for : Optional[str] , application : Optional[str] ) -> None","title":"Summary"},{"location":"api/#parameters","text":"username : str The username. password : str The password. impersonating : Optional[str] (optional) For a proxy, the user that is being impersonated. Defaults to None. forwarded_for : Optional[str] (optional) For a proxy, the host on which the actual client is situated. Defaults to None. application : Optional[str] (optional) The name of the application. Defaults to None.","title":"Parameters"},{"location":"api/#async-method-basicauthenticatorauthenticate","text":"","title":"async method BasicAuthenticator.authenticate"},{"location":"api/#summary_2","text":"Authenticate the client async BasicAuthenticator . authenticate ( reader : DataReader , writer : DataWriter ) -> None","title":"Summary"},{"location":"api/#parameters_1","text":"reader : DataReader writer : DataWriter","title":"Parameters"},{"location":"api/#method-basicauthenticatorto_connection_string","text":"","title":"method BasicAuthenticator.to_connection_string"},{"location":"api/#summary_3","text":"Get the connection string. BasicAuthenticator . to_connection_string ( ) -> str","title":"Summary"},{"location":"api/#returns","text":"str : The connection string.","title":"Returns"},{"location":"api/#class-callbackclientclient","text":"","title":"class CallbackClient(Client)"},{"location":"api/#summary_4","text":"Feedbus callback client jetblack_messagebus . CallbackClient ( reader : DataReader , writer : DataWriter , authenticator : Optional[Authenticator] , monitor_heartbeat : bool ) -> None","title":"Summary"},{"location":"api/#parameters_2","text":"reader : DataReader writer : DataWriter authenticator : Optional[Authenticator] monitor_heartbeat : bool","title":"Parameters"},{"location":"api/#property-callbackclientauthorization_handlers","text":"","title":"property CallbackClient.authorization_handlers"},{"location":"api/#summary_5","text":"The handlers called when an authorization request is","title":"Summary"},{"location":"api/#description","text":"received. authorization_handlers -> List[AuthorizationHandler]","title":"Description"},{"location":"api/#property-callbackclientclosed_handlers","text":"","title":"property CallbackClient.closed_handlers"},{"location":"api/#summary_6","text":"The list of handlers called when a connection is closed closed_handlers -> List[ClosedHandler]","title":"Summary"},{"location":"api/#property-callbackclientdata_handlers","text":"","title":"property CallbackClient.data_handlers"},{"location":"api/#summary_7","text":"The list of handlers called when data is received. data_handlers -> List[DataHandler]","title":"Summary"},{"location":"api/#property-callbackclientnotification_handlers","text":"","title":"property CallbackClient.notification_handlers"},{"location":"api/#summary_8","text":"The list of handlers called when a notification is received notification_handlers -> List[NotificationHandler]","title":"Summary"},{"location":"api/#async-class-method-callbackclientcreate","text":"","title":"async class method CallbackClient.create"},{"location":"api/#summary_9","text":"Create the client async CallbackClient . create ( port : int , * , authenticator : Optional[Authenticator] , ssl : Optional[SSLContext] , monitor_heartbeat : bool ) -> Client","title":"Summary"},{"location":"api/#parameters_3","text":"port : int The distributor port authenticator : Optional[Authenticator] (optional) An authenticator. Defaults to None. ssl : Optional[SSLContext] (optional) The context for an ssl connection. Defaults to None. monitor_heartbeat : bool (optional) If true use the monitor heartbeat. Defaults to False.","title":"Parameters"},{"location":"api/#returns_1","text":"Client : The connected client.","title":"Returns"},{"location":"api/#async-method-callbackclientadd_notification","text":"","title":"async method CallbackClient.add_notification"},{"location":"api/#summary_10","text":"Add a notification async CallbackClient . add_notification ( feed : str ) -> None","title":"Summary"},{"location":"api/#parameters_4","text":"feed : str The feed name.","title":"Parameters"},{"location":"api/#async-method-callbackclientadd_subscription","text":"","title":"async method CallbackClient.add_subscription"},{"location":"api/#summary_11","text":"Add a subscription async CallbackClient . add_subscription ( feed : str , topic : str ) -> None","title":"Summary"},{"location":"api/#parameters_5","text":"feed : str The feed name. topic : str The topic name.","title":"Parameters"},{"location":"api/#async-method-callbackclientauthorize","text":"","title":"async method CallbackClient.authorize"},{"location":"api/#summary_12","text":"Send an authorization response. async CallbackClient . authorize ( client_id : UUID , feed : str , topic : str , is_authorization_required : bool , entitlements : Optional[Set[int]] ) -> None","title":"Summary"},{"location":"api/#parameters_6","text":"client_id : UUID An identifier for the client. feed : str The feed name. topic : str The topic name. is_authorization_required : bool If True, authorization is required. entitlements : Optional[Set[int]] The entitlements of the user.","title":"Parameters"},{"location":"api/#async-method-callbackclienton_authorization","text":"","title":"async method CallbackClient.on_authorization"},{"location":"api/#summary_13","text":"Called when authorization is requested async CallbackClient . on_authorization ( client_id : UUID , host : str , user : str , feed : str , topic : str ) -> None","title":"Summary"},{"location":"api/#parameters_7","text":"client_id : UUID host : str user : str feed : str topic : str","title":"Parameters"},{"location":"api/#async-method-callbackclienton_closed","text":"","title":"async method CallbackClient.on_closed"},{"location":"api/#summary_14","text":"Called when the connection has been closed async CallbackClient . on_closed ( is_faulted : bool ) -> None","title":"Summary"},{"location":"api/#parameters_8","text":"is_faulted : bool If true the connection was closed by the server","title":"Parameters"},{"location":"api/#async-method-callbackclienton_data","text":"","title":"async method CallbackClient.on_data"},{"location":"api/#summary_15","text":"Called when data is received async CallbackClient . on_data ( user : str , host : str , feed : str , topic : str , data_packets : Optional[List[DataPacket]] , is_image : bool ) -> None","title":"Summary"},{"location":"api/#parameters_9","text":"user : str The user name of the sender. host : str The host from which the data was sent. feed : str The feed name. topic : str The topic name. data_packets : Optional[List[DataPacket]] The data packets. is_image : bool True if the data is considered an image.","title":"Parameters"},{"location":"api/#async-method-callbackclienton_forwarded_subscription_request","text":"","title":"async method CallbackClient.on_forwarded_subscription_request"},{"location":"api/#summary_16","text":"Called for a notification. async CallbackClient . on_forwarded_subscription_request ( client_id : UUID , user : str , host : str , feed : str , topic : str , is_add : bool ) -> None","title":"Summary"},{"location":"api/#parameters_10","text":"client_id : UUID An identifier for the client. user : str The name of the user that requested the subscription. host : str The host from which the subscription was requested. feed : str The feed name. topic : str The topic name. is_add : bool If true the request was to add a subscription.","title":"Parameters"},{"location":"api/#async-method-callbackclientpublish","text":"","title":"async method CallbackClient.publish"},{"location":"api/#summary_17","text":"Publish data to subscribers async CallbackClient . publish ( feed : str , topic : str , is_image : bool , data_packets : Optional[List[DataPacket]] ) -> None","title":"Summary"},{"location":"api/#parameters_11","text":"feed : str The feed name. topic : str The topic name. is_image : bool If true the data is considered an image. data_packets : Optional[List[DataPacket]] Th data packets.","title":"Parameters"},{"location":"api/#async-method-callbackclientremove_notification","text":"","title":"async method CallbackClient.remove_notification"},{"location":"api/#summary_18","text":"Remove a notification async CallbackClient . remove_notification ( feed : str ) -> None","title":"Summary"},{"location":"api/#parameters_12","text":"feed : str The feed name.","title":"Parameters"},{"location":"api/#async-method-callbackclientremove_subscription","text":"","title":"async method CallbackClient.remove_subscription"},{"location":"api/#summary_19","text":"Remove a subscription async CallbackClient . remove_subscription ( feed : str , topic : str ) -> None","title":"Summary"},{"location":"api/#parameters_13","text":"feed : str The feed name. topic : str The topic name.","title":"Parameters"},{"location":"api/#async-method-callbackclientsend","text":"","title":"async method CallbackClient.send"},{"location":"api/#summary_20","text":"Send data to a client async CallbackClient . send ( client_id : UUID , feed : str , topic : str , is_image : bool , data_packets : Optional[List[DataPacket]] ) -> None","title":"Summary"},{"location":"api/#parameters_14","text":"client_id : UUID The clint id. feed : str The feed name. topic : str The topic name. is_image : bool If true the data is considered an image. data_packets : Optional[List[DataPacket]] Th data packets.","title":"Parameters"},{"location":"api/#async-method-callbackclientstart","text":"","title":"async method CallbackClient.start"},{"location":"api/#summary_21","text":"Start handling messages async CallbackClient . start ( ) -> None","title":"Summary"},{"location":"api/#method-callbackclientstop","text":"","title":"method CallbackClient.stop"},{"location":"api/#summary_22","text":"Stop handling messages CallbackClient . stop ( ) -> None","title":"Summary"},{"location":"api/#class-client","text":"","title":"class Client"},{"location":"api/#summary_23","text":"Feedbus client jetblack_messagebus . Client ( reader : DataReader , writer : DataWriter , authenticator : Optional[Authenticator] , monitor_heartbeat : bool ) -> None","title":"Summary"},{"location":"api/#parameters_15","text":"reader : DataReader writer : DataWriter authenticator : Optional[Authenticator] monitor_heartbeat : bool","title":"Parameters"},{"location":"api/#async-class-method-clientcreate","text":"","title":"async class method Client.create"},{"location":"api/#summary_24","text":"Create the client async Client . create ( port : int , * , authenticator : Optional[Authenticator] , ssl : Optional[SSLContext] , monitor_heartbeat : bool ) -> Client","title":"Summary"},{"location":"api/#parameters_16","text":"port : int The distributor port authenticator : Optional[Authenticator] (optional) An authenticator. Defaults to None. ssl : Optional[SSLContext] (optional) The context for an ssl connection. Defaults to None. monitor_heartbeat : bool (optional) If true use the monitor heartbeat. Defaults to False.","title":"Parameters"},{"location":"api/#returns_2","text":"Client : The connected client.","title":"Returns"},{"location":"api/#async-method-clientadd_notification","text":"","title":"async method Client.add_notification"},{"location":"api/#summary_25","text":"Add a notification async Client . add_notification ( feed : str ) -> None","title":"Summary"},{"location":"api/#parameters_17","text":"feed : str The feed name.","title":"Parameters"},{"location":"api/#async-method-clientadd_subscription","text":"","title":"async method Client.add_subscription"},{"location":"api/#summary_26","text":"Add a subscription async Client . add_subscription ( feed : str , topic : str ) -> None","title":"Summary"},{"location":"api/#parameters_18","text":"feed : str The feed name. topic : str The topic name.","title":"Parameters"},{"location":"api/#async-method-clientauthorize","text":"","title":"async method Client.authorize"},{"location":"api/#summary_27","text":"Send an authorization response. async Client . authorize ( client_id : UUID , feed : str , topic : str , is_authorization_required : bool , entitlements : Optional[Set[int]] ) -> None","title":"Summary"},{"location":"api/#parameters_19","text":"client_id : UUID An identifier for the client. feed : str The feed name. topic : str The topic name. is_authorization_required : bool If True, authorization is required. entitlements : Optional[Set[int]] The entitlements of the user.","title":"Parameters"},{"location":"api/#async-method-clienton_authorization","text":"","title":"async method Client.on_authorization"},{"location":"api/#summary_28","text":"Called when authorization is requested async Client . on_authorization ( client_id : UUID , host : str , user : str , feed : str , topic : str ) -> None","title":"Summary"},{"location":"api/#parameters_20","text":"client_id : UUID host : str user : str feed : str topic : str","title":"Parameters"},{"location":"api/#async-method-clienton_closed","text":"","title":"async method Client.on_closed"},{"location":"api/#summary_29","text":"Called when the connection has been closed async Client . on_closed ( is_faulted : bool ) -> None","title":"Summary"},{"location":"api/#parameters_21","text":"is_faulted : bool If true the connection was closed by the server","title":"Parameters"},{"location":"api/#async-method-clienton_data","text":"","title":"async method Client.on_data"},{"location":"api/#summary_30","text":"Called when data is received async Client . on_data ( user : str , host : str , feed : str , topic : str , data_packets : Optional[List[DataPacket]] , is_image : bool ) -> None","title":"Summary"},{"location":"api/#parameters_22","text":"user : str The user name of the sender. host : str The host from which the data was sent. feed : str The feed name. topic : str The topic name. data_packets : Optional[List[DataPacket]] The data packets. is_image : bool True if the data is considered an image.","title":"Parameters"},{"location":"api/#async-method-clienton_forwarded_subscription_request","text":"","title":"async method Client.on_forwarded_subscription_request"},{"location":"api/#summary_31","text":"Called for a notification. async Client . on_forwarded_subscription_request ( client_id : UUID , user : str , host : str , feed : str , topic : str , is_add : bool ) -> None","title":"Summary"},{"location":"api/#parameters_23","text":"client_id : UUID An identifier for the client. user : str The name of the user that requested the subscription. host : str The host from which the subscription was requested. feed : str The feed name. topic : str The topic name. is_add : bool If true the request was to add a subscription.","title":"Parameters"},{"location":"api/#async-method-clientpublish","text":"","title":"async method Client.publish"},{"location":"api/#summary_32","text":"Publish data to subscribers async Client . publish ( feed : str , topic : str , is_image : bool , data_packets : Optional[List[DataPacket]] ) -> None","title":"Summary"},{"location":"api/#parameters_24","text":"feed : str The feed name. topic : str The topic name. is_image : bool If true the data is considered an image. data_packets : Optional[List[DataPacket]] Th data packets.","title":"Parameters"},{"location":"api/#async-method-clientremove_notification","text":"","title":"async method Client.remove_notification"},{"location":"api/#summary_33","text":"Remove a notification async Client . remove_notification ( feed : str ) -> None","title":"Summary"},{"location":"api/#parameters_25","text":"feed : str The feed name.","title":"Parameters"},{"location":"api/#async-method-clientremove_subscription","text":"","title":"async method Client.remove_subscription"},{"location":"api/#summary_34","text":"Remove a subscription async Client . remove_subscription ( feed : str , topic : str ) -> None","title":"Summary"},{"location":"api/#parameters_26","text":"feed : str The feed name. topic : str The topic name.","title":"Parameters"},{"location":"api/#async-method-clientsend","text":"","title":"async method Client.send"},{"location":"api/#summary_35","text":"Send data to a client async Client . send ( client_id : UUID , feed : str , topic : str , is_image : bool , data_packets : Optional[List[DataPacket]] ) -> None","title":"Summary"},{"location":"api/#parameters_27","text":"client_id : UUID The clint id. feed : str The feed name. topic : str The topic name. is_image : bool If true the data is considered an image. data_packets : Optional[List[DataPacket]] Th data packets.","title":"Parameters"},{"location":"api/#async-method-clientstart","text":"","title":"async method Client.start"},{"location":"api/#summary_36","text":"Start handling messages async Client . start ( ) -> None","title":"Summary"},{"location":"api/#method-clientstop","text":"","title":"method Client.stop"},{"location":"api/#summary_37","text":"Stop handling messages Client . stop ( ) -> None","title":"Summary"},{"location":"api/#class-datapacket","text":"","title":"class DataPacket"},{"location":"api/#summary_38","text":"Initialise a data packet. jetblack_messagebus.io . DataPacket ( entitlements : Optional[Set[int]] , data : Optional[bytes] ) -> None","title":"Summary"},{"location":"api/#parameters_28","text":"entitlements : Optional[Set[int]] An optional set of entitlements. data : Optional[bytes] The data.","title":"Parameters"},{"location":"api/#class-nullauthenticatorauthenticator","text":"","title":"class NullAuthenticator(Authenticator)"},{"location":"api/#summary_39","text":"Null Authenticator jetblack_messagebus.authentication . NullAuthenticator ( impersonating : Union[str, NoneType] , forwarded_for : Union[str, NoneType] , application : Union[str, NoneType] ) -> None","title":"Summary"},{"location":"api/#parameters_29","text":"impersonating : Union[str, NoneType] (optional) forwarded_for : Union[str, NoneType] (optional) application : Union[str, NoneType] (optional)","title":"Parameters"},{"location":"api/#async-method-nullauthenticatorauthenticate","text":"","title":"async method NullAuthenticator.authenticate"},{"location":"api/#summary_40","text":"Authenticate the client async NullAuthenticator . authenticate ( reader : DataReader , writer : DataWriter ) -> None","title":"Summary"},{"location":"api/#parameters_30","text":"reader : DataReader writer : DataWriter","title":"Parameters"},{"location":"api/#class-tokenauthenticatorconnectionstringauthenticator","text":"","title":"class TokenAuthenticator(ConnectionStringAuthenticator)"},{"location":"api/#summary_41","text":"Token Authenticator jetblack_messagebus.authentication . TokenAuthenticator ( token : str , impersonating : Union[str, NoneType] , forwarded_for : Union[str, NoneType] , application : Union[str, NoneType] ) -> None","title":"Summary"},{"location":"api/#parameters_31","text":"token : str impersonating : Union[str, NoneType] (optional) forwarded_for : Union[str, NoneType] (optional) application : Union[str, NoneType] (optional)","title":"Parameters"},{"location":"api/#async-method-tokenauthenticatorauthenticate","text":"","title":"async method TokenAuthenticator.authenticate"},{"location":"api/#summary_42","text":"Authenticate the client async TokenAuthenticator . authenticate ( reader : DataReader , writer : DataWriter ) -> None","title":"Summary"},{"location":"api/#parameters_32","text":"reader : DataReader writer : DataWriter","title":"Parameters"},{"location":"api/#method-tokenauthenticatorto_connection_string","text":"","title":"method TokenAuthenticator.to_connection_string"},{"location":"api/#summary_43","text":"Get the connection string. TokenAuthenticator . to_connection_string ( ) -> str","title":"Summary"},{"location":"api/#returns_3","text":"str : The connection string.","title":"Returns"}]}